{"version":3,"sources":["components/transitions/fade-in.js","components/board/character.js","components/board/characterBox.js","components/board/scoredisplay.js","components/board/board.js","components/footer/footer.js","components/header/header.js","App.js","serviceWorker.js","index.js"],"names":["FadeIn","defaultStyle","transition","props","duration","transitionDelay","delay","opacity","position","transitionStyles","entering","direction","length","entered","Transition","in","this","timeout","appear","state","style","children","Component","Character","handleClick","onCharacterClick","index","className","src","character","img","alt","onClick","CharacterBox","characters","map","key","name","ScoreDisplay","score","shuffleArray","arr","a","Math","random","sort","b","initialChars","clicked","Board","setState","user","current","Footer","href","target","rel","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc8aff69.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { Transition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nexport default class FadeIn extends Component {\n\n    defaultStyle = {\n        transition: `all ${this.props.duration}ms ease-in-out`,\n        transitionDelay: this.props.delay || '0',\n        opacity: 0,\n        position: 'relative'\n    };\n\n    transitionStyles = {\n        entering: {\n            opacity: 0,\n            [this.props.direction]: this.props.length || '50px'\n        },\n        entered: {\n            opacity: 1,\n            [this.props.direction]: '0'\n        }\n    };\n\n    render(){\n        return (\n            <Transition in={this.props.in || true} timeout={this.props.duration} appear={true}>\n                {(state) => (\n                    <div style={{...this.defaultStyle,...this.transitionStyles[state] }}>\n                    {this.props.children}\n                    </div>\n                )}\n            </Transition>\n        )\n    }\n};\n\nFadeIn.propTypes = {\n    delay:      PropTypes.string,\n    direction:  PropTypes.string,\n    duration:    PropTypes.number.isRequired,\n    length:     PropTypes.string\n};","import React, { Component } from 'react';\n\nimport FadeIn from '../transitions/fade-in';\n\nexport default class Character extends Component {\n\n    handleClick = () => {\n        this.props.onCharacterClick(this.props.index);\n    }\n\n    render(){ return(\n        <FadeIn\n            delay=\"1.5s\"\n            duration={500}>\n            <div className=\"character\">\n                <img \n                    src={this.props.character.img} \n                    alt=\"character\" \n                    className=\"profile-pic\"\n                    onClick={this.handleClick}/>\n            </div>\n        </FadeIn>\n    )\n    }\n}","import React from 'react';\n\nimport Character from './character';\n\nconst CharacterBox = (props) => {\n    return(\n        <div className=\"character-box\">\n            {props.characters.map( (character, index) => <Character character={character} index={index} onCharacterClick={props.onCharacterClick} key={character.name} />)}\n        </div>\n    )\n};\n\nexport default CharacterBox;","import React from 'react';\n\nconst ScoreDisplay = (props) => (<div className=\"score-keeper\">Score: {props.score}</div>);\n\nexport default ScoreDisplay;","import React, { Component } from 'react';\n\nimport FadeIn from '../transitions/fade-in';\nimport CharacterBox from './characterBox';\nimport ScoreDisplay from './scoredisplay';\n\nconst shuffleArray = arr => (\n    arr\n      .map(a => [Math.random(), a])\n      .sort((a, b) => a[0] - b[0])\n      .map(a => a[1]) \n);\n\nconst initialChars = [\n    {\n        name: 'Spongebob Squarepants',\n        img: 'images/Spongebob_squarepants.png',\n        clicked: false\n    },\n    {\n        name: 'Patrick Star',\n        img: 'images/Patrick_stock_art.png',\n        clicked: false\n    },\n    {\n        name: 'Squidward',\n        img: 'images/Squidward_stock_art.png',\n        clicked: false\n    },\n    {\n        name: 'Mr. Krabbs',\n        img: 'images/Krabs_artwork.png',\n        clicked: false\n    },\n    {\n        name: 'Gary',\n        img: 'images/Gary_looking_up_stock_art.png',\n        clicked: false\n    },\n    {\n        name: 'Tom Fish',\n        img: 'images/SpongeBob_SquarePants_-_Tom.jpg',\n        clicked: false\n    },\n    {\n        name: 'Sandy Cheeks',\n        img: 'images/Sandy_stock_art.png',\n        clicked: false\n    },\n    {\n        name: 'Plankton',\n        img: 'images/Plankton_stock_art.png',\n        clicked: false\n    },\n    {\n        name: 'Mrs. Puff',\n        img: 'images/Mrs_Puff_stock_art.png',\n        clicked: false\n    },\n    {\n        name: 'Mermaidman',\n        img: 'images/Mermaidman.png',\n        clicked: false\n    },\n    {\n        name: 'Larry The Lobster',\n        img: 'images/Larry_the_Lobster.png',\n        clicked: false\n    },\n    {\n        name: 'Barnacle boy',\n        img: 'images/BB3.png',\n        clicked: false\n    },\n]\n\nexport default class Board extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            user: {\n                score: 0 \n            },\n            characters: shuffleArray( initialChars )\n        };\n    }\n\n    onCharacterClick = ( index ) =>{\n        if( !this.state.characters[index].clicked ){\n            this.setState({\n                characters: shuffleArray( this.state.characters.map( (character, current) =>  {\n                    return ( current === index ) ? { ...character, clicked:true } : character\n                })),\n                user: {\n                    ...this.state.user,\n                    score: this.state.user.score + 1\n                }\n            });\n            //and shuffle\n        } else {\n            this.setState({\n                characters: shuffleArray(this.state.characters.map( character => { return { ...character, clicked : false } })),\n                user: {\n                    ...this.state.user,\n                    score: 0\n                }\n            });\n            //and shuffle\n        }\n        \n    }\n\n    render(){\n        return (\n            <div className=\"Board\">\n                <FadeIn \n                    in={true}\n                    duration={450}\n                    length={'30px'}\n                    direction={'bottom'}\n                    delay={'1s'}>\n                    <h4>Try to click on every Spongebob Character once. Once you click a character the grid will shuffle.<br/>Try not to click the same character twice or the game will start all over!</h4>\n                </FadeIn>\n                <FadeIn \n                    in={true}\n                    duration={500}\n                    direction={'bottom'}\n                    delay={'1.5s'}>\n                    <ScoreDisplay\n                        score={this.state.user.score} />\n                </FadeIn>\n                <CharacterBox \n                    characters={this.state.characters} \n                    onCharacterClick={this.onCharacterClick} />\n            </div>\n        )\n    }\n\n}","import React from 'react';\n\nimport FadeIn from '../transitions/fade-in';\n\nconst Footer = () => {\n    return (\n        <footer className=\"Footer\">\n            <FadeIn \n                delay={'1s'}\n                direction={'top'}\n                length={'20px'}\n                duration={500}>\n                <a href=\"\" target=\"_blank\" rel=\"noopener noreferrer\"><h3></h3></a>\n            </FadeIn>\n        </footer>\n    )\n};\n\nexport default Footer;","import React from 'react';\nimport FadeIn from '../transitions/fade-in';\n\nconst Header = () => { return(\n    <header className=\"App-header\">\n        <FadeIn in={true} duration={600} length={'30px'} direction={'bottom'}>\n            <h2>Penn Coding Boot Camp Assignment</h2>\n        </FadeIn>\n        <FadeIn in={true} duration={600} length={'50px'} direction={'bottom'} >\n            <h1>Spongebob Squarepants Clicky Game</h1>\n        </FadeIn>\n    </header>\n)};\n\nexport default Header;","import React, { Component } from 'react';\n\nimport Board from './components/board/board';\nimport Footer from './components/footer/footer';\nimport Header from './components/header/header';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Board />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}